#+OPTIONS: num:nil
#+OPTIONS: prop:t
* 1

Explica cuáles son las ventajas de utilizar funciones.
* 2
Haz un esquema de la sintaxis de la definición de una función,
   marcando los elementos que la forman en el siguiente ejemplo:

#+BEGIN_SRC cpp
std::string ejemplo(std::string texto)
{
    return "Esto es un ejemplo de función: " + texto;
}
#+END_SRC
* 3
Escribe la definición de un procedimiento que muestre en el terminal el mensaje =Hello, world!=. El procedimiento debe llamarse =saludar=. Escribe una llamada a dicho procedimiento.
* 4
Escribe la definición de una función que devuelva el texto =Hello, world!=. La función debe llamarse =saludo=.

Escribe una llamada a dicha función, y utiliza el valor devuelto para mostrar en el terminal dicho valor.
* 5
Escribe la definición de una función que calcule y devuelva la distancia entre dos puntos de un plano dadas sus coordenadas cartesianas. La función debe llamarse =distancia=. Debe tener cuatro parámetros, que son las coordenadas de los dos puntos: los dos primeros, las de un punto, y los dos últimos las del otro punto. Utiliza =double= tanto para los parámetros como para el valor devuelto.

Para hallar la raíz cuadrada de un número =n=, utiliza =std::sqrt(n)=.

Escribe una llamada a dicha función para calcular la distancia entre los puntos (1, 2) y (4, 6).
* 6

Escribe la definición de una función que convierta grados sexagesimales a radianes. La función debe llarmarse =radianes=. Utiliza =double= para todos los datos numéricos.

Escribe llamadas a dicha función que calculen los radianes correspondientes a 30°, 45°, 90° y 180°.
* 7
Escribe la definición de una función que convierta radianes en grados sexagesimales. La función debe llamarse =grados=. Utiliza =double= para todos los datos numéricos.

Escribe llamadas a dicha función que calculen los grados sexagesimales correspondientes a $\pi/2$, $\pi$, $3\pi/2$ y $2\pi$ radianes.
* 8
Corrige los errores sintácticos de las siguientes definiciones de funciones:
#+begin_src cpp
iniciales(std::string texto)
{
    std::istringstream iss{texto};
    std::string resultado {};
    std::string palabra;
    while (iss >> palabra) {
        resultado += palabra[0];
    }
    return resultado;
}

std::string ordenado_por_palabras(texto)
{
    std::istringstream iss{texto};
    std::vector<std::string> palabras {};
    std::string palabra;
    while (iss >> palabra) {
        palabras.push_back(palabra);
    }
    palabras.sort(palabras.begin(), palabras.end());
    std::string resultado {};
    for (const auto& p : palabras) {
        resultado += p + " ";
    }
    resultado.pop_back();
    return resultado;
}

int cuenta_palabras{std::string texto}
{
    std::istringstream iss{texto};
    std::string palabra;
    int resultado {0};
    while (iss >> palabra) {
        resultado++;
    }
    return resultado;
}
#+end_src

Nota: dentro del cuerpo de las funciones no hay errores sintáticos. No es necesario que entiendas dicho cuerpo. Los errores están sólo en la sintaxis de la definición.
